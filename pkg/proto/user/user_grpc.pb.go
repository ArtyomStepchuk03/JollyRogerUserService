// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: pkg/proto/user/user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	JollyRogerUserService_HealthCheck_FullMethodName                = "/user.JollyRogerUserService/HealthCheck"
	JollyRogerUserService_GetUser_FullMethodName                    = "/user.JollyRogerUserService/GetUser"
	JollyRogerUserService_GetUserByTelegramID_FullMethodName        = "/user.JollyRogerUserService/GetUserByTelegramID"
	JollyRogerUserService_CreateUser_FullMethodName                 = "/user.JollyRogerUserService/CreateUser"
	JollyRogerUserService_UpdateUser_FullMethodName                 = "/user.JollyRogerUserService/UpdateUser"
	JollyRogerUserService_AddUserPreference_FullMethodName          = "/user.JollyRogerUserService/AddUserPreference"
	JollyRogerUserService_RemoveUserPreference_FullMethodName       = "/user.JollyRogerUserService/RemoveUserPreference"
	JollyRogerUserService_GetUserPreferences_FullMethodName         = "/user.JollyRogerUserService/GetUserPreferences"
	JollyRogerUserService_UpdateUserLocation_FullMethodName         = "/user.JollyRogerUserService/UpdateUserLocation"
	JollyRogerUserService_GetUserLocation_FullMethodName            = "/user.JollyRogerUserService/GetUserLocation"
	JollyRogerUserService_FindNearbyUsers_FullMethodName            = "/user.JollyRogerUserService/FindNearbyUsers"
	JollyRogerUserService_GetUserStats_FullMethodName               = "/user.JollyRogerUserService/GetUserStats"
	JollyRogerUserService_UpdateUserRating_FullMethodName           = "/user.JollyRogerUserService/UpdateUserRating"
	JollyRogerUserService_UpdateNotificationSettings_FullMethodName = "/user.JollyRogerUserService/UpdateNotificationSettings"
	JollyRogerUserService_GetNotificationSettings_FullMethodName    = "/user.JollyRogerUserService/GetNotificationSettings"
)

// JollyRogerUserServiceClient is the client API for JollyRogerUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JollyRogerUserServiceClient interface {
	// Health check
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Управление профилем
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	GetUserByTelegramID(ctx context.Context, in *GetUserByTelegramIDRequest, opts ...grpc.CallOption) (*UserResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	// Управление предпочтениями
	AddUserPreference(ctx context.Context, in *AddUserPreferenceRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	RemoveUserPreference(ctx context.Context, in *RemoveUserPreferenceRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	GetUserPreferences(ctx context.Context, in *GetUserPreferencesRequest, opts ...grpc.CallOption) (*UserPreferencesResponse, error)
	// Геолокация
	UpdateUserLocation(ctx context.Context, in *UpdateUserLocationRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	GetUserLocation(ctx context.Context, in *GetUserLocationRequest, opts ...grpc.CallOption) (*UserLocationResponse, error)
	FindNearbyUsers(ctx context.Context, in *FindNearbyUsersRequest, opts ...grpc.CallOption) (*UsersResponse, error)
	// Статистика и рейтинг
	GetUserStats(ctx context.Context, in *GetUserStatsRequest, opts ...grpc.CallOption) (*UserStatsResponse, error)
	UpdateUserRating(ctx context.Context, in *UpdateUserRatingRequest, opts ...grpc.CallOption) (*UserResponse, error)
	// Настройки уведомлений
	UpdateNotificationSettings(ctx context.Context, in *UpdateNotificationSettingsRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	GetNotificationSettings(ctx context.Context, in *GetNotificationSettingsRequest, opts ...grpc.CallOption) (*NotificationSettingsResponse, error)
}

type jollyRogerUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJollyRogerUserServiceClient(cc grpc.ClientConnInterface) JollyRogerUserServiceClient {
	return &jollyRogerUserServiceClient{cc}
}

func (c *jollyRogerUserServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, JollyRogerUserService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jollyRogerUserServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, JollyRogerUserService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jollyRogerUserServiceClient) GetUserByTelegramID(ctx context.Context, in *GetUserByTelegramIDRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, JollyRogerUserService_GetUserByTelegramID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jollyRogerUserServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, JollyRogerUserService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jollyRogerUserServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, JollyRogerUserService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jollyRogerUserServiceClient) AddUserPreference(ctx context.Context, in *AddUserPreferenceRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, JollyRogerUserService_AddUserPreference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jollyRogerUserServiceClient) RemoveUserPreference(ctx context.Context, in *RemoveUserPreferenceRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, JollyRogerUserService_RemoveUserPreference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jollyRogerUserServiceClient) GetUserPreferences(ctx context.Context, in *GetUserPreferencesRequest, opts ...grpc.CallOption) (*UserPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserPreferencesResponse)
	err := c.cc.Invoke(ctx, JollyRogerUserService_GetUserPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jollyRogerUserServiceClient) UpdateUserLocation(ctx context.Context, in *UpdateUserLocationRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, JollyRogerUserService_UpdateUserLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jollyRogerUserServiceClient) GetUserLocation(ctx context.Context, in *GetUserLocationRequest, opts ...grpc.CallOption) (*UserLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserLocationResponse)
	err := c.cc.Invoke(ctx, JollyRogerUserService_GetUserLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jollyRogerUserServiceClient) FindNearbyUsers(ctx context.Context, in *FindNearbyUsersRequest, opts ...grpc.CallOption) (*UsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsersResponse)
	err := c.cc.Invoke(ctx, JollyRogerUserService_FindNearbyUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jollyRogerUserServiceClient) GetUserStats(ctx context.Context, in *GetUserStatsRequest, opts ...grpc.CallOption) (*UserStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserStatsResponse)
	err := c.cc.Invoke(ctx, JollyRogerUserService_GetUserStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jollyRogerUserServiceClient) UpdateUserRating(ctx context.Context, in *UpdateUserRatingRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, JollyRogerUserService_UpdateUserRating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jollyRogerUserServiceClient) UpdateNotificationSettings(ctx context.Context, in *UpdateNotificationSettingsRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, JollyRogerUserService_UpdateNotificationSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jollyRogerUserServiceClient) GetNotificationSettings(ctx context.Context, in *GetNotificationSettingsRequest, opts ...grpc.CallOption) (*NotificationSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotificationSettingsResponse)
	err := c.cc.Invoke(ctx, JollyRogerUserService_GetNotificationSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JollyRogerUserServiceServer is the server API for JollyRogerUserService service.
// All implementations must embed UnimplementedJollyRogerUserServiceServer
// for forward compatibility.
type JollyRogerUserServiceServer interface {
	// Health check
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Управление профилем
	GetUser(context.Context, *GetUserRequest) (*UserResponse, error)
	GetUserByTelegramID(context.Context, *GetUserByTelegramIDRequest) (*UserResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*UserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UserResponse, error)
	// Управление предпочтениями
	AddUserPreference(context.Context, *AddUserPreferenceRequest) (*SimpleResponse, error)
	RemoveUserPreference(context.Context, *RemoveUserPreferenceRequest) (*SimpleResponse, error)
	GetUserPreferences(context.Context, *GetUserPreferencesRequest) (*UserPreferencesResponse, error)
	// Геолокация
	UpdateUserLocation(context.Context, *UpdateUserLocationRequest) (*SimpleResponse, error)
	GetUserLocation(context.Context, *GetUserLocationRequest) (*UserLocationResponse, error)
	FindNearbyUsers(context.Context, *FindNearbyUsersRequest) (*UsersResponse, error)
	// Статистика и рейтинг
	GetUserStats(context.Context, *GetUserStatsRequest) (*UserStatsResponse, error)
	UpdateUserRating(context.Context, *UpdateUserRatingRequest) (*UserResponse, error)
	// Настройки уведомлений
	UpdateNotificationSettings(context.Context, *UpdateNotificationSettingsRequest) (*SimpleResponse, error)
	GetNotificationSettings(context.Context, *GetNotificationSettingsRequest) (*NotificationSettingsResponse, error)
	mustEmbedUnimplementedJollyRogerUserServiceServer()
}

// UnimplementedJollyRogerUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedJollyRogerUserServiceServer struct{}

func (UnimplementedJollyRogerUserServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedJollyRogerUserServiceServer) GetUser(context.Context, *GetUserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedJollyRogerUserServiceServer) GetUserByTelegramID(context.Context, *GetUserByTelegramIDRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByTelegramID not implemented")
}
func (UnimplementedJollyRogerUserServiceServer) CreateUser(context.Context, *CreateUserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedJollyRogerUserServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedJollyRogerUserServiceServer) AddUserPreference(context.Context, *AddUserPreferenceRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserPreference not implemented")
}
func (UnimplementedJollyRogerUserServiceServer) RemoveUserPreference(context.Context, *RemoveUserPreferenceRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserPreference not implemented")
}
func (UnimplementedJollyRogerUserServiceServer) GetUserPreferences(context.Context, *GetUserPreferencesRequest) (*UserPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPreferences not implemented")
}
func (UnimplementedJollyRogerUserServiceServer) UpdateUserLocation(context.Context, *UpdateUserLocationRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserLocation not implemented")
}
func (UnimplementedJollyRogerUserServiceServer) GetUserLocation(context.Context, *GetUserLocationRequest) (*UserLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLocation not implemented")
}
func (UnimplementedJollyRogerUserServiceServer) FindNearbyUsers(context.Context, *FindNearbyUsersRequest) (*UsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNearbyUsers not implemented")
}
func (UnimplementedJollyRogerUserServiceServer) GetUserStats(context.Context, *GetUserStatsRequest) (*UserStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStats not implemented")
}
func (UnimplementedJollyRogerUserServiceServer) UpdateUserRating(context.Context, *UpdateUserRatingRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserRating not implemented")
}
func (UnimplementedJollyRogerUserServiceServer) UpdateNotificationSettings(context.Context, *UpdateNotificationSettingsRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotificationSettings not implemented")
}
func (UnimplementedJollyRogerUserServiceServer) GetNotificationSettings(context.Context, *GetNotificationSettingsRequest) (*NotificationSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationSettings not implemented")
}
func (UnimplementedJollyRogerUserServiceServer) mustEmbedUnimplementedJollyRogerUserServiceServer() {}
func (UnimplementedJollyRogerUserServiceServer) testEmbeddedByValue()                               {}

// UnsafeJollyRogerUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JollyRogerUserServiceServer will
// result in compilation errors.
type UnsafeJollyRogerUserServiceServer interface {
	mustEmbedUnimplementedJollyRogerUserServiceServer()
}

func RegisterJollyRogerUserServiceServer(s grpc.ServiceRegistrar, srv JollyRogerUserServiceServer) {
	// If the following call pancis, it indicates UnimplementedJollyRogerUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&JollyRogerUserService_ServiceDesc, srv)
}

func _JollyRogerUserService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JollyRogerUserServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JollyRogerUserService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JollyRogerUserServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JollyRogerUserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JollyRogerUserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JollyRogerUserService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JollyRogerUserServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JollyRogerUserService_GetUserByTelegramID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByTelegramIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JollyRogerUserServiceServer).GetUserByTelegramID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JollyRogerUserService_GetUserByTelegramID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JollyRogerUserServiceServer).GetUserByTelegramID(ctx, req.(*GetUserByTelegramIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JollyRogerUserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JollyRogerUserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JollyRogerUserService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JollyRogerUserServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JollyRogerUserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JollyRogerUserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JollyRogerUserService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JollyRogerUserServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JollyRogerUserService_AddUserPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserPreferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JollyRogerUserServiceServer).AddUserPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JollyRogerUserService_AddUserPreference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JollyRogerUserServiceServer).AddUserPreference(ctx, req.(*AddUserPreferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JollyRogerUserService_RemoveUserPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserPreferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JollyRogerUserServiceServer).RemoveUserPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JollyRogerUserService_RemoveUserPreference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JollyRogerUserServiceServer).RemoveUserPreference(ctx, req.(*RemoveUserPreferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JollyRogerUserService_GetUserPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JollyRogerUserServiceServer).GetUserPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JollyRogerUserService_GetUserPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JollyRogerUserServiceServer).GetUserPreferences(ctx, req.(*GetUserPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JollyRogerUserService_UpdateUserLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JollyRogerUserServiceServer).UpdateUserLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JollyRogerUserService_UpdateUserLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JollyRogerUserServiceServer).UpdateUserLocation(ctx, req.(*UpdateUserLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JollyRogerUserService_GetUserLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JollyRogerUserServiceServer).GetUserLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JollyRogerUserService_GetUserLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JollyRogerUserServiceServer).GetUserLocation(ctx, req.(*GetUserLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JollyRogerUserService_FindNearbyUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindNearbyUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JollyRogerUserServiceServer).FindNearbyUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JollyRogerUserService_FindNearbyUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JollyRogerUserServiceServer).FindNearbyUsers(ctx, req.(*FindNearbyUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JollyRogerUserService_GetUserStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JollyRogerUserServiceServer).GetUserStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JollyRogerUserService_GetUserStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JollyRogerUserServiceServer).GetUserStats(ctx, req.(*GetUserStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JollyRogerUserService_UpdateUserRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JollyRogerUserServiceServer).UpdateUserRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JollyRogerUserService_UpdateUserRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JollyRogerUserServiceServer).UpdateUserRating(ctx, req.(*UpdateUserRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JollyRogerUserService_UpdateNotificationSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotificationSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JollyRogerUserServiceServer).UpdateNotificationSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JollyRogerUserService_UpdateNotificationSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JollyRogerUserServiceServer).UpdateNotificationSettings(ctx, req.(*UpdateNotificationSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JollyRogerUserService_GetNotificationSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JollyRogerUserServiceServer).GetNotificationSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JollyRogerUserService_GetNotificationSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JollyRogerUserServiceServer).GetNotificationSettings(ctx, req.(*GetNotificationSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JollyRogerUserService_ServiceDesc is the grpc.ServiceDesc for JollyRogerUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JollyRogerUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.JollyRogerUserService",
	HandlerType: (*JollyRogerUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _JollyRogerUserService_HealthCheck_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _JollyRogerUserService_GetUser_Handler,
		},
		{
			MethodName: "GetUserByTelegramID",
			Handler:    _JollyRogerUserService_GetUserByTelegramID_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _JollyRogerUserService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _JollyRogerUserService_UpdateUser_Handler,
		},
		{
			MethodName: "AddUserPreference",
			Handler:    _JollyRogerUserService_AddUserPreference_Handler,
		},
		{
			MethodName: "RemoveUserPreference",
			Handler:    _JollyRogerUserService_RemoveUserPreference_Handler,
		},
		{
			MethodName: "GetUserPreferences",
			Handler:    _JollyRogerUserService_GetUserPreferences_Handler,
		},
		{
			MethodName: "UpdateUserLocation",
			Handler:    _JollyRogerUserService_UpdateUserLocation_Handler,
		},
		{
			MethodName: "GetUserLocation",
			Handler:    _JollyRogerUserService_GetUserLocation_Handler,
		},
		{
			MethodName: "FindNearbyUsers",
			Handler:    _JollyRogerUserService_FindNearbyUsers_Handler,
		},
		{
			MethodName: "GetUserStats",
			Handler:    _JollyRogerUserService_GetUserStats_Handler,
		},
		{
			MethodName: "UpdateUserRating",
			Handler:    _JollyRogerUserService_UpdateUserRating_Handler,
		},
		{
			MethodName: "UpdateNotificationSettings",
			Handler:    _JollyRogerUserService_UpdateNotificationSettings_Handler,
		},
		{
			MethodName: "GetNotificationSettings",
			Handler:    _JollyRogerUserService_GetNotificationSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/user/user.proto",
}
