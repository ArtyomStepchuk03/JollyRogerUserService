services:
  postgres:
    image: postgres:15
    container_name: ${DB_CONTAINER_NAME}
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    expose:
      - "${DB_PORT}"
    networks:
      jolly_roger_user_net:
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: ${CACHE_CONTAINER_NAME}
    restart: always
    env_file:
      - .env
    expose:
      - "${REDIS_PORT}"
    networks:
      - jolly_roger_user_net
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  userservice:
    container_name: ${SERVICE_CONTAINER_NAME}
    image: user-service
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "${GRPC_PORT}:${GRPC_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      jolly_roger_user_net:
      jolly-roger-network:
        aliases:
          - user-service
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}

volumes:
  pgdata:

networks:
  jolly_roger_user_net:
    name: jolly_roger_user_net
  jolly-roger-network:
    external: true
    name: jolly_roger_network