package main

import (
	"JollyRogerUserService/infrastructure"
	"JollyRogerUserService/internal/database"
	"JollyRogerUserService/internal/user"
	"JollyRogerUserService/pb"
	"os"

	"context"
	"fmt"
	"log"
	"net"

	"github.com/redis/go-redis/v9"
	"google.golang.org/grpc"
)

func main() {
	// üöÄ –õ–æ–≥ —Å—Ç–∞—Ä—Ç–∞
	log.Println("üõ°Ô∏è  Starting Jolly Roger UserService...")

	// üì¶ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
	dbDsn := fmt.Sprintf(
		"host=%s user=%s password=%s dbname=%s port=%s sslmode=disable",
		getEnv("DB_HOST", "localhost"),
		getEnv("DB_USER", "postgres"),
		getEnv("DB_PASSWORD", "postgres"),
		getEnv("DB_NAME", "jolly_roger"),
		getEnv("DB_PORT", "5432"),
	)
	database.ConnectDB(dbDsn)

	// üß± –ê–≤—Ç–æ–º–∏–≥—Ä–∞—Ü–∏—è (–µ—Å–ª–∏ –Ω–∞–¥–æ)
	database.AutoMigrate(&user.User{}, &user.Details{}, &user.Settings{})

	// üß† –ü–æ–¥–∫–ª—é—á–∞–µ–º Redis
	rdb := redis.NewClient(&redis.Options{
		Addr: fmt.Sprintf("%s:%s",
			getEnv("REDIS_HOST", "localhost"),
			getEnv("REDIS_PORT", "6379"),
		),
	})
	ctx := context.Background()
	if err := rdb.Ping(ctx).Err(); err != nil {
		log.Fatalf("‚ùå Redis connection failed: %v", err)
	}
	log.Println("‚úÖ Connected to Redis")

	// üõ† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
	userRepo := infrastructure.NewUserRepository(database.DB)
	userService := user.NewService(userRepo, rdb)
	handler := infrastructure.NewGRPCHandler(userService)

	// üõ∞ –ó–∞–ø—É—Å–∫ gRPC-—Å–µ—Ä–≤–µ—Ä–∞
	listener, err := net.Listen("tcp", ":50051")
	if err != nil {
		log.Fatalf("‚ùå Failed to listen on port 50051: %v", err)
	}

	grpcServer := grpc.NewServer()
	pb.RegisterUserServiceServer(grpcServer, handler)

	log.Println("‚úÖ gRPC server is running on port :50051")
	if err := grpcServer.Serve(listener); err != nil {
		log.Fatalf("‚ùå Failed to serve gRPC server: %v", err)
	}
}

// getEnv –ø–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –¥–µ—Ñ–æ–ª—Ç–∞–º–∏
func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}
